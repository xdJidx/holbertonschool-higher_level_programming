>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix_divided(matrix, 3)
[[1, 2, 3], [4, 5, 6]]

Division de la matrix par 0
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

Le diviseur est un string
>>> matrix_divided(matrix, "School")
Traceback (most recent call last):
TypeError: div must be a number

Il n'y a pas de diviseur
>>> matrix_divided(matrix, )
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

Un Float dans la matrice
>>> matrix_divided(matrix, 3)
[[0.33, 0.77, 1.0], [1.33, 1.67, 2.0]]

Avec un "str" dans la matrice
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Diviser avec un nombre nÃ©gatif
>>> matrix_divided(matrix, -3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

>>> matrix_divided(None)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'


Non-Numbers
===========

``matrix_divided()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

>>> matrix_divided(matrix, float('inf'))
Traceback (most recent call last):
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> matrix_divided("hello", 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(float('nan'))
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

